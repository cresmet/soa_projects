<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Wed Dec 28 10:06:50 PST 2016
  Author:  ssanagala
  Type: BPEL 2.0 Process
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ExpeditorImportProcess"
         targetNamespace="http://ibd.specialized.com/WingPOS/ExpeditorImport/ExpeditorImportProcess"
         xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:client="http://ibd.specialized.com/WingPOS/ExpeditorImport/ExpeditorImportProcess"
         xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:ui="http://xmlns.oracle.com/soa/designer"
         xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns1="http://xmlns.oracle.com/WingPOS/ExpeditorImport/Order"
         xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/db/WingPOS/ExpeditorImport/InsertOrders"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ess="http://xmlns.oracle.com/scheduler"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns3="http://schema.ibd.specialized.com/pos/wing/order"
         xmlns:ns4="http://ibd.specialized.com/IM/CommonErrorProcess"
         xmlns:ns5="http://schema.ibd.specialized.com/Common/CommonError" xmlns:xsd="http://www.w3.org/2001/XMLSchema"
         xmlns:ns6="http://xmlns.oracle.com/pcbpel/adapter/db/top/InsertOrders"
         xmlns:ns7="http://xmlns.oracle.com/WingPOS/ExpeditorImport/OrderPicking"
         xmlns:ns8="http://schema.ibd.specialized.com/pos/wing/picking">
    <bpelx:inlineSubProcess name="CallLog">
        <variables>
            <variable name="subVar" type="xsd:string"/>
        </variables>
        <sequence name="Sequence3">
            <assign name="AssignLog">
                <copy>
                    <from>0</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:severity</to>
                </copy>
                <copy>
                    <from>'SOA ERROR'</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:errorcode</to>
                </copy>
                <copy>
                    <from>$LogRequestMsgType.payload/ns5:faultmessage</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:faultmessage</to>
                </copy>
                <copy>
                    <from>ora:getCompositeName()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:servicename</to>
                </copy>
                <copy>
                    <from>$LogRequestMsgType.payload/ns5:faultcode</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:faultcode</to>
                </copy>
                <copy>
                    <from>ora:getECID()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:uuid</to>
                </copy>
                <copy>
                    <from>ora:getFlowId()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:serviceinstanceid</to>
                </copy>
                <copy>
                    <from>ora:getCurrentDateTime()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:servicestarttime</to>
                </copy>
                <copy>
                    <from>ora:getComponentName()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:componentname</to>
                </copy>
                <copy>
                    <from>ora:getApplicationName()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:servername</to>
                </copy>
                <copy>
                    <from>ora:getComponentName()</from>
                    <to>$InvokeLog_InputVariable.payload/ns5:servicecontext</to>
                </copy>
            </assign>
            <invoke name="InvokeLog" partnerLink="WriteLog" portType="ns4:CommonErrorProcess" operation="process"
                    inputVariable="InvokeLog_InputVariable" outputVariable="InvokeLog_OutputVariable"
                    bpelx:invokeAsDetail="no"/>
        </sequence>
    </bpelx:inlineSubProcess>
    <import ui:processWSDL="true" namespace="http://ibd.specialized.com/WingPOS/ExpeditorImport/ExpeditorImportProcess"
            location="../WSDLs/ExpeditorImportProcess.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import location="oracle.xml.parser.v2.XMLElement" importType="http://schemas.oracle.com/bpel/extension/java"/>
    <import location="org.w3c.dom.Element" importType="http://schemas.oracle.com/bpel/extension/java"/>
    <import location="java.security.*" importType="http://schemas.oracle.com/bpel/extension/java"/>
    <import location="java.math.*" importType="http://schemas.oracle.com/bpel/extension/java"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="expeditorimportprocess_client" partnerLinkType="client:ExpeditorImportProcess"
                     myRole="ExpeditorImportProcessProvider" partnerRole="ExpeditorImportProcessRequester"/>
        <partnerLink name="Order" partnerLinkType="ns1:Order" partnerRole="OrderProvider"/>
        <partnerLink name="InsertOrders" partnerLinkType="ns2:InsertOrders_plt" partnerRole="InsertOrders_role"/>
        <partnerLink name="WriteLog" partnerLinkType="ns4:CommonErrorProcess" partnerRole="CommonErrorProcessProvider"/>
        <partnerLink name="OrderPicking" partnerLinkType="ns7:OrderPicking" partnerRole="OrderPickingProvider"/>
    </partnerLinks>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="inputVariable" messageType="client:ExpeditorImportProcessRequestMessage"/>
        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="outputVariable" messageType="client:ExpeditorImportProcessResponseMessage"/>
        <variable name="GetOrderCount_InputVariable" messageType="ns1:getOrderList_inputMessage"/>
        <variable name="GetOrderCount_OutputVariable" messageType="ns1:getOrderList_outputMessage"/>
        <variable name="InvokeLog_InputVariable" messageType="ns4:CommonErrorProcessRequestMessage"/>
        <variable name="InvokeLog_OutputVariable" messageType="ns4:CommonErrorProcessResponseMessage"/>
        <variable name="LogRequestMsgType" messageType="ns4:CommonErrorProcessRequestMessage"/>
        <variable name="LogResponseMsgType" messageType="ns4:CommonErrorProcessResponseMessage"/>
        <variable name="CallOrders_getOrderList_InputVariable" messageType="ns1:getOrderList_inputMessage"/>
        <variable name="CallOrders_getOrderList_OutputVariable" messageType="ns1:getOrderList_outputMessage"/>
        <variable name="InsertOrders_InputVariable" messageType="ns2:SbcExpeditorStgTblCollection_msg"/>
        <variable name="CallPickOrder_InputVariable" messageType="ns7:pickOrder_inputMessage"/>
        <variable name="CallPickOrder_OutputVariable" messageType="ns7:pickOrder_outputMessage"/>
    </variables>
    <faultHandlers>
        <catchAll>
            <sequence name="Sequence2">
                <assign name="AssignFault">
                    <copy>
                        <from>substring-before(substring-after(ora:getFaultAsString(), "&amp;lt;detail&amp;gt;"), "&amp;lt;/detail&amp;gt;")</from>
                        <to>$outputVariable.payload/client:Result</to>
                    </copy>
                    <copy>
                        <from>ora:getFaultName()</from>
                        <to>$LogRequestMsgType.payload/ns5:faultcode</to>
                    </copy>
                    <copy>
                        <from>substring-before(substring-after(ora:getFaultAsString(),'detail=&lt;detail&gt;'),'&lt;/detail&gt;')</from>
                        <to>$LogRequestMsgType.payload/ns5:faultmessage</to>
                    </copy>
                </assign>
                <extensionActivity>
                    <bpelx:call name="WriteLog" target="CallLog"/>
                </extensionActivity>
                <invoke name="CallbackFault" partnerLink="expeditorimportprocess_client"
                        portType="client:ExpeditorImportProcessCallback" operation="onResult"
                        inputVariable="outputVariable" bpelx:invokeAsDetail="no"/>
            </sequence>
        </catchAll>
    </faultHandlers>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in ExpeditorImportProcess.wsdl) -->
        <receive name="receiveInput" partnerLink="expeditorimportprocess_client"
                 portType="client:ExpeditorImportProcess" operation="Initiate" variable="inputVariable"
                 createInstance="yes"/>
        <scope name="AssignURI">
            <sequence name="Sequence1">
                <if name="IfStartdDateExists">
                    <condition>string-length($inputVariable.payload/client:StartDate) &gt; 0</condition>
                    <assign name="AssignStartDate">
                        <copy>
                            <from>$inputVariable.payload/client:StartDate</from>
                            <to>$inputVariable.payload/client:StartDate</to>
                        </copy>
                    </assign>
                    <else>
                        <assign name="AssignStartDate">
                            <copy>
                                <from>xp20:current-dateTime()</from>
                                <to>$inputVariable.payload/client:StartDate</to>
                            </copy>
                        </assign>
                    </else>
                </if>
                <assign name="AssignURI">
                    <copy>
                        <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','app_key','Value','TBD')</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:APP_KEY</to>
                    </copy>
                    <copy>
                        <from>xp20:current-dateTime()</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:END_MODIFIED</to>
                    </copy>
                    <copy>
                        <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','fields','Value','TBD')</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:FIELDS</to>
                    </copy>
                    <copy>
                        <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','method','Value','TBD')</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:METHOD</to>
                    </copy>
                    <copy>
                        <from>1</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:PAGE_NO</to>
                    </copy>
                    <copy>
                        <from>2</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:PAGE_SIZE</to>
                    </copy>
                    <copy>
                        <from>xp20:current-dateTime()</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:TIMESTAMP</to>
                    </copy>
                    <copy>
                        <from>$inputVariable.payload/client:StartDate</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:START_MODIFIED</to>
                    </copy>
                    <copy>
                        <from>1</from>
                        <to>$GetOrderCount_InputVariable.request/ns3:V</to>
                    </copy>
                </assign>
                <extensionActivity>
                    <bpelx:exec name="encryptURI" language="java">
                        <![CDATA[try {       
 XMLElement app_key_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:APP_KEY");    
 XMLElement fields_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:FIELDS");    
 XMLElement method_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:METHOD");     
 XMLElement page_no_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:PAGE_NO");    
 XMLElement page_size_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:PAGE_SIZE");    
 XMLElement start_modified_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:START_MODIFIED");    
 XMLElement end_modified_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:END_MODIFIED");     
 XMLElement timestamp_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:TIMESTAMP");    
 XMLElement version_input = (XMLElement) getVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:V");    
    
 String app_key = app_key_input.getTextContent();    
 String fields = fields_input.getTextContent();     
 String method = method_input.getTextContent();       
 String page_no = page_no_input.getTextContent();    
 String page_size = page_size_input.getTextContent();    
 String start_modified = start_modified_input.getTextContent();    
 String end_modified = end_modified_input.getTextContent();    
 String timestamp = timestamp_input.getTextContent();    
 String version = version_input.getTextContent();    
       
       
 String s = "48b8b97fa6a9172e866ad4d7dee8162d" + app_key + end_modified + fields + method + page_no + page_size + start_modified + timestamp + version;       
 MessageDigest m = MessageDigest.getInstance("MD5"); 
 m.reset(); 
 m.update(s.getBytes(), 0, s.length());       
 addAuditTrailEntry("====JavaEmbeddingInstances===");   
 addAuditTrailEntry("Input URI Values "+s);    
 //addAuditTrailEntry("MD5: " + new BigInteger(1,m.digest()).toString(16).toUpperCase());   
 setVariableData("GetOrderCount_InputVariable", "request", "/ns3:OrderRequest/ns3:SIGN",new BigInteger(1, m.digest()).toString(16).toUpperCase());       
       
} catch (Exception e) {       
 System.out.println("exception " + e.getMessage());       
 addAuditTrailEntry(e);       
}]]>
                    </bpelx:exec>
                </extensionActivity>
            </sequence>
        </scope>
        <scope name="OrderCount">
            <faultHandlers>
                <catchAll>
                    <sequence name="Sequence2" xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                        <assign name="AssignFault">
                            <copy>
                                <from>substring-before(substring-after(ora:getFaultAsString(), "&amp;lt;detail&amp;gt;"), "&amp;lt;/detail&amp;gt;")</from>
                                <to>$outputVariable.payload/client:Result</to>
                            </copy>
                            <copy>
                                <from>'Failed in at count'</from>
                                <to>$LogRequestMsgType.payload/ns5:technicaldescription</to>
                            </copy>
                        </assign>
                        <extensionActivity>
                            <bpelx:call name="WriteLog" target="CallLog"
                                        xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                        </extensionActivity>
                        <invoke name="CallbackFault" partnerLink="expeditorimportprocess_client"
                                portType="client:ExpeditorImportProcessCallback" operation="onResult"
                                inputVariable="outputVariable" bpelx:invokeAsDetail="no"
                                xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                    </sequence>
                </catchAll>
            </faultHandlers>
            <invoke name="GetOrderCount" partnerLink="Order" portType="ns1:Order_ptt" operation="getOrderList"
                    inputVariable="GetOrderCount_InputVariable" outputVariable="GetOrderCount_OutputVariable"
                    bpelx:invokeAsDetail="no"/>
        </scope>
        <if name="IfOrdersExists">
            <condition>$GetOrderCount_OutputVariable.reply/ns3:TotalCount &gt; 0 and $GetOrderCount_OutputVariable.reply/ns3:Code = 0</condition>
            <sequence>
                <scope name="Scope1">
                    <forEach parallel="no" counterName="page_count" name="order_loop">
                        <startCounterValue>1</startCounterValue>
                        <finalCounterValue>ceiling($GetOrderCount_OutputVariable.reply/ns3:TotalCount div 2)</finalCounterValue>
                        <scope name="orders">
                            <faultHandlers>
                                <catchAll>
                                    <sequence name="Sequence2"
                                              xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                                        <assign name="AssignFault">
                                            <copy>
                                                <from>substring-before(substring-after(ora:getFaultAsString(), "&amp;lt;detail&amp;gt;"), "&amp;lt;/detail&amp;gt;")</from>
                                                <to>$outputVariable.payload/client:Result</to>
                                            </copy>
                                            <copy>
                                                <from>substring-before(substring-after(ora:getFaultAsString(),'detail=&lt;detail&gt;'),'&lt;/detail&gt;')</from>
                                                <to>$LogRequestMsgType.payload/ns5:faultmessage</to>
                                            </copy>
                                            <copy>
                                                <from>ora:getFaultName()</from>
                                                <to>$LogRequestMsgType.payload/ns5:faultmessage</to>
                                            </copy>
                                        </assign>
                                        <extensionActivity>
                                            <bpelx:call name="WriteLog" target="CallLog"
                                                        xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                        </extensionActivity>
                                        <invoke name="CallbackFault" partnerLink="expeditorimportprocess_client"
                                                portType="client:ExpeditorImportProcessCallback" operation="onResult"
                                                inputVariable="outputVariable" bpelx:invokeAsDetail="no"
                                                xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                    </sequence>
                                </catchAll>
                            </faultHandlers>
                            <sequence name="Sequence5">
                                <scope name="TestScope">
                                    <sequence>
                                        <assign name="AssignURI"
                                                xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                                            <copy>
                                                <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','app_key','Value','TBD')</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:APP_KEY</to>
                                            </copy>
                                            <copy>
                                                <from>xp20:current-dateTime()</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:END_MODIFIED</to>
                                            </copy>
                                            <copy>
                                                <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','fields','Value','TBD')</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:FIELDS</to>
                                            </copy>
                                            <copy>
                                                <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrders.dvm','Property','method','Value','TBD')</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:METHOD</to>
                                            </copy>
                                            <copy>
                                                <from>2</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:PAGE_SIZE</to>
                                            </copy>
                                            <copy>
                                                <from>$inputVariable.payload/client:StartDate</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:START_MODIFIED</to>
                                            </copy>
                                            <copy>
                                                <from>xp20:current-dateTime()</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:TIMESTAMP</to>
                                            </copy>
                                            <copy>
                                                <from>1</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:V</to>
                                            </copy>
                                            <copy>
                                                <from>$page_count</from>
                                                <to>$CallOrders_getOrderList_InputVariable.request/ns3:PAGE_NO</to>
                                            </copy>
                                        </assign>
                                        <extensionActivity xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                                            <bpelx:exec name="encryptURI" language="java"
                                                        xmlns:bpelx="http://schemas.oracle.com/bpel/extension">
                                                <![CDATA[try {        
 XMLElement app_key_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:APP_KEY");     
 XMLElement fields_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:FIELDS");     
 XMLElement method_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:METHOD");      
 XMLElement page_no_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:PAGE_NO");     
 XMLElement page_size_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:PAGE_SIZE");     
 XMLElement start_modified_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:START_MODIFIED");     
 XMLElement end_modified_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:END_MODIFIED");      
 XMLElement timestamp_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:TIMESTAMP");     
 XMLElement version_input = (XMLElement) getVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:V");     
     
 String app_key = app_key_input.getTextContent();     
 String fields = fields_input.getTextContent();      
 String method = method_input.getTextContent();        
 String page_no = page_no_input.getTextContent();     
 String page_size = page_size_input.getTextContent();     
 String start_modified = start_modified_input.getTextContent();     
 String end_modified = end_modified_input.getTextContent();     
 String timestamp = timestamp_input.getTextContent();     
 String version = version_input.getTextContent();     
        
        
 String s = "48b8b97fa6a9172e866ad4d7dee8162d" + app_key + end_modified + fields + method + page_no + page_size + start_modified + timestamp + version;        
 MessageDigest m = MessageDigest.getInstance("MD5");  
 m.reset();  
 m.update(s.getBytes(), 0, s.length());        
 addAuditTrailEntry("====JavaEmbeddingInstances===");    
 addAuditTrailEntry("Input URI Values "+s);     
 //addAuditTrailEntry("MD5: " + new BigInteger(1,m.digest()).toString(16).toUpperCase());    
 setVariableData("CallOrders_getOrderList_InputVariable", "request", "/ns3:OrderRequest/ns3:SIGN",new BigInteger(1, m.digest()).toString(16).toUpperCase());        
        
} catch (Exception e) {        
 System.out.println("exception " + e.getMessage());        
 addAuditTrailEntry(e);        
}]]>
                                            </bpelx:exec>
                                        </extensionActivity>
                                    </sequence>
                                </scope>
                                <invoke name="CallOrders" partnerLink="Order" portType="ns1:Order_ptt"
                                        operation="getOrderList" inputVariable="CallOrders_getOrderList_InputVariable"
                                        outputVariable="CallOrders_getOrderList_OutputVariable"
                                        bpelx:invokeAsDetail="no"/>
                                <assign name="XformOrders">
                                    <bpelx:annotation>
                                        <bpelx:pattern patternName="bpelx:xquery"></bpelx:pattern>
                                    </bpelx:annotation>
                                    <copy>
                                        <from>ora:processXQuery10('../Transformations/InsertOrders.xqy', 'CallOrders_getOrderList_OutputVariable.reply', $CallOrders_getOrderList_OutputVariable.reply)</from>
                                        <to variable="InsertOrders_InputVariable" part="SbcExpeditorStgTblCollection"/>
                                    </copy>
                                </assign>
                                <invoke name="InsertOrders" partnerLink="InsertOrders" portType="ns2:InsertOrders_ptt"
                                        operation="insert" inputVariable="InsertOrders_InputVariable"
                                        bpelx:invokeAsDetail="no"/>
                                <scope name="PickingLoop">
                                    <bpelx:skipCondition>true()</bpelx:skipCondition>
                                    <forEach parallel="no" counterName="ord_cnt" name="picking_loop">
                                        <startCounterValue>1</startCounterValue>
                                        <finalCounterValue>count($CallOrders_getOrderList_OutputVariable.reply/ns3:Rows/ns3:Orders[ns3:OrderStatus=3])</finalCounterValue>
                                        <scope name="Scope3">
                                            <variables>
                                                <variable name="myVar" type="xsd:integer"/>
                                            </variables>
                                            <sequence name="Sequence9">
                                                <assign name="AssignPickURI">
                                                    <copy>
                                                        <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrderPick.dvm','Property','app_key','Value','TBD')</from>
                                                        <to>$CallPickOrder_InputVariable.request/ns8:APP_KEY</to>
                                                    </copy>
                                                    <copy>
                                                        <from>1</from>
                                                        <to>$CallPickOrder_InputVariable.request/ns8:V</to>
                                                    </copy>
                                                    <copy>
                                                        <from>$CallOrders_getOrderList_OutputVariable.reply/ns3:Rows/ns3:Orders[$ord_cnt]/ns3:Id</from>
                                                        <to>$CallPickOrder_InputVariable.request/ns8:ORDERID</to>
                                                    </copy>
                                                    <copy>
                                                        <from>xp20:current-dateTime()</from>
                                                        <to>$CallPickOrder_InputVariable.request/ns8:TIMESTAMP</to>
                                                    </copy>
                                                    <copy>
                                                        <from>dvm:lookupValue('oramds:/apps/DVMs/WingOrderPick.dvm','Property','method','Value','TBD')</from>
                                                        <to>$CallPickOrder_InputVariable.request/ns8:METHOD</to>
                                                    </copy>
                                                </assign>
                                                <extensionActivity>
                                                    <bpelx:exec name="encryptPickURI" language="java">
                                                        <![CDATA[try {         
 XMLElement app_key_input   = (XMLElement) getVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:APP_KEY");      
 XMLElement method_input    = (XMLElement) getVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:METHOD");       
 XMLElement order_id_input  = (XMLElement) getVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:ORDERID");            
 XMLElement timestamp_input = (XMLElement) getVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:TIMESTAMP");      
 XMLElement version_input   = (XMLElement) getVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:V");      
      
 String app_key = app_key_input.getTextContent();      
 String method = method_input.getTextContent();       
 String order_id = order_id_input.getTextContent();
 String timestamp = timestamp_input.getTextContent();
 String version = version_input.getTextContent();  
         
         
 String s = "48b8b97fa6a9172e866ad4d7dee8162d" + app_key + method + order_id + timestamp + version;         
 MessageDigest m = MessageDigest.getInstance("MD5");   
 m.reset();   
 m.update(s.getBytes(), 0, s.length());         
 addAuditTrailEntry("====JavaEmbeddingInstances===");     
 addAuditTrailEntry("Input URI Values "+s);      
 //addAuditTrailEntry("MD5: " + new BigInteger(1,m.digest()).toString(16).toUpperCase());     
 setVariableData("CallPickOrder_InputVariable", "request", "/ns8:PickRequest/ns8:SIGN",new BigInteger(1, m.digest()).toString(16).toUpperCase());         
         
} catch (Exception e) {         
 System.out.println("exception " + e.getMessage());         
 addAuditTrailEntry(e);         
}]]>
                                                    </bpelx:exec>
                                                </extensionActivity>
                                                <invoke name="CallPickOrder" partnerLink="OrderPicking"
                                                        portType="ns7:OrderPicking_ptt" operation="pickOrder"
                                                        inputVariable="CallPickOrder_InputVariable"
                                                        outputVariable="CallPickOrder_OutputVariable"
                                                        bpelx:invokeAsDetail="no"/>
                                                <if name="PICK_STATUS">
                                                    <documentation>
                                                        <![CDATA[success]]>
                                                    </documentation>
                                                    <condition>$CallPickOrder_OutputVariable.reply/ns8:Code = 0</condition>
                                                    <empty name="DO_NOTHING"/>
                                                    <else>
                                                        <sequence name="Sequence2"
                                                                  xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                                                            <assign name="AssignFault">
                                                                <copy>
                                                                    <from>$CallPickOrder_OutputVariable.reply/ns8:Message</from>
                                                                    <to>$LogRequestMsgType.payload/ns5:faultmessage</to>
                                                                </copy>
                                                                <copy>
                                                                    <from>$CallPickOrder_OutputVariable.reply/ns8:Message</from>
                                                                    <to>$outputVariable.payload/client:Result</to>
                                                                </copy>
                                                            </assign>
                                                            <extensionActivity>
                                                                <bpelx:call name="WriteLog" target="CallLog"
                                                                            xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                                            </extensionActivity>
                                                            <invoke name="CallbackFault"
                                                                    partnerLink="expeditorimportprocess_client"
                                                                    portType="client:ExpeditorImportProcessCallback"
                                                                    operation="onResult" inputVariable="outputVariable"
                                                                    bpelx:invokeAsDetail="no"
                                                                    xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                                        </sequence>
                                                    </else>
                                                </if>
                                            </sequence>
                                        </scope>
                                    </forEach>
                                </scope>
                            </sequence>
                        </scope>
                    </forEach>
                </scope>
                <assign name="AssignOutput">
                    <copy>
                        <from>$GetOrderCount_OutputVariable.reply/ns3:TotalCount</from>
                        <to>$outputVariable.payload/client:Result</to>
                    </copy>
                </assign>
            </sequence>
            <else>
                <sequence name="Sequence6">
                    <if name="NO_DATA">
                        <documentation>
                            <![CDATA[no records]]>
                        </documentation>
                        <condition>$GetOrderCount_OutputVariable.reply/ns3:TotalCount = 0 and $GetOrderCount_OutputVariable.reply/ns3:Code = 0</condition>
                        <sequence name="Sequence7">
                            <assign name="AssignOutput">
                                <copy>
                                    <from>'No valid records to import'</from>
                                    <to>$outputVariable.payload/client:Result</to>
                                </copy>
                            </assign>
                            <invoke name="callbackClient" partnerLink="expeditorimportprocess_client"
                                    portType="client:ExpeditorImportProcessCallback" operation="onResult"
                                    inputVariable="outputVariable" bpelx:invokeAsDetail="no"/>
                        </sequence>
                        <else>
                            <documentation>
                                <![CDATA[api error]]>
                            </documentation>
                            <sequence name="Sequence8">
                                <sequence name="Sequence2"
                                          xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                                    <assign name="AssignFault">
                                        <copy>
                                            <from>$GetOrderCount_OutputVariable.reply/ns3:Message</from>
                                            <to>$outputVariable.payload/client:Result</to>
                                        </copy>
                                        <copy>
                                            <from>$GetOrderCount_OutputVariable.reply/ns3:Message</from>
                                            <to>$LogRequestMsgType.payload/ns5:faultmessage</to>
                                        </copy>
                                    </assign>
                                    <extensionActivity>
                                        <bpelx:call name="WriteLog" target="CallLog"
                                                    xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                    </extensionActivity>
                                    <invoke name="CallbackFault" partnerLink="expeditorimportprocess_client"
                                            portType="client:ExpeditorImportProcessCallback" operation="onResult"
                                            inputVariable="outputVariable" bpelx:invokeAsDetail="no"
                                            xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                                </sequence>
                            </sequence>
                        </else>
                    </if>
                </sequence>
            </else>
        </if>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <invoke name="callbackClient" partnerLink="expeditorimportprocess_client"
                portType="client:ExpeditorImportProcessCallback" operation="onResult" inputVariable="outputVariable"/>
    </sequence>
</process>